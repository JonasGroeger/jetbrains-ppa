#!/usr/bin/env bash

set -euxo pipefail

function update_package_version {
    local package
    local new_version
    local download_url
    local package_json
    local preinstall
    package="$1"
    new_version="$2"
    download_url="$3"
    package_json="${package}/package.json"
    preinstall="${package}/preinstall"

    # package.json
    jq ".version = \"${new_version}\"" "${package_json}" > version-update.json
    mv version-update.json "${package_json}"

    # preinstall
    sed -i "/wget/s|https://[^\"]*|${download_url}|" "${preinstall}"
}

function git_push() {
    local gh_token
    gh_token="$1"

    if [ -z "${gh_token}" ]; then
        >&2 echo "Please set GH_TOKEN"
        exit 1
    fi

    git remote set-url origin "https://${gh_token}@github.com/jonasgroeger/jetbrains-ppa.git" > /dev/null 2>&1
    git push --quiet --set-upstream origin master
}

COMMIT_FILE=commit.txt
rm -f "$COMMIT_FILE"

find packages -maxdepth 1 -mindepth 1 -type d -print0 | while read -d $'\0' PACKAGE_DIR
do
    PACKAGE_JSON="${PACKAGE_DIR}/package.json"

    # Default for released applications
    VERSION_FIELD="version"
    RELEASE_TYPE="release"
    RELEASE_KEY="$(jq --raw-output ".releaseNameOverride // \"linux\"" "${PACKAGE_JSON}")"

    # Handle EAP packages
    EAP="$(jq --raw-output ".eap // false" "${PACKAGE_JSON}")"
    if [[ "${EAP}" == "true" ]]; then
      VERSION_FIELD="build"     # EAP have duplicates for the version, so we need to use build instead
      RELEASE_TYPE="eap"
    fi

    # Handle preview packages
    PREVIEW="$(jq --raw-output ".preview // false" "${PACKAGE_JSON}")"
    if [[ "${PREVIEW}" == "true" ]]; then
      RELEASE_TYPE="preview"
    fi

    CODE="$(jq --raw-output --exit-status ".code" "${PACKAGE_JSON}")"
    if [ -z "${CODE}" ]; then
        >&2 echo "[E] Cannot find 'code' key within ${PACKAGE_JSON}"
        continue
    fi

    RELEASES_JSON="releases-${CODE}.json"
    if [ ! -f "${PACKAGE_JSON}" ]; then
        >&2 echo "[E] Cannot find ${PACKAGE_JSON}"
        continue
    fi

    curl -sfLo "${RELEASES_JSON}" "https://data.services.jetbrains.com/products/releases?code=${CODE}&latest=true&type=${RELEASE_TYPE}"

    if [ "$(jq 'length == 0' "${RELEASES_JSON}")" == "true" ]; then # checks if the returned ${RELEASES_JSON} isn't empty
        >&2 echo "[E] ${RELEASES_JSON} is empty."
        rm -f "${RELEASES_JSON}"
        continue
    fi

    LOCAL_VERSION="$(jq --raw-output --exit-status ".version" "${PACKAGE_JSON}")"     # still use .version locally
    REMOTE_VERSION="$(jq --raw-output --exit-status ".${CODE}[0].${VERSION_FIELD}" "${RELEASES_JSON}")"
    # TODO: Fleet has linux_x64 and linux_aarch64 but no linux
    DOWNLOAD_URL="$(jq --raw-output --exit-status ".${CODE}[0].downloads.linux.link" "${RELEASES_JSON}")"
    rm -f "${RELEASES_JSON}"

    if [ -z "${LOCAL_VERSION}" ] || [ -z "${REMOTE_VERSION}" ]; then
        >&2 echo "[E] Both 'LOCAL_VERSION' and 'REMOTE_VERSION' must be set. Probably a curl / jq error."
        continue
    fi

    if [ "${LOCAL_VERSION}" == "${REMOTE_VERSION}" ]; then
        >&2 printf "%3s: Local (%10s) == Remote (%10s) -> Not updating.\n" "${CODE}" "${LOCAL_VERSION}" "${REMOTE_VERSION}"
        continue
    fi

    printf "%3s: Local (%10s) != Remote (%10s) -> Updating.\n" "${CODE}" "${LOCAL_VERSION}" "${REMOTE_VERSION}"

    update_package_version "${PACKAGE_DIR}" "${REMOTE_VERSION}" "${DOWNLOAD_URL}"

    ./build-single-deb "${PACKAGE_DIR}"

    echo "Upgrade ${CODE}: ${LOCAL_VERSION} -> ${REMOTE_VERSION}" >> "$COMMIT_FILE"
done
