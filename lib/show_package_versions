#!/usr/bin/env python

from __future__ import print_function

import argparse
from pathlib import Path
import urllib2
import json
import subprocess

import launchpadlib
import os
from launchpadlib.launchpad import Launchpad
from launchpadlib.credentials import Credentials
from lazr.restfulclient.errors import HTTPError, NotFound

HERE = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))

class BuildException(Exception):
    pass


def _get_latest_release_info(product_code):
    api_url = 'https://data.services.jetbrains.com/products/releases?code={}'
    url = api_url.format(product_code)

    resource = urllib2.urlopen(url)
    if resource.code != 200:
        raise BuildException(
            "Requesting {} (code={}) failed with the following reason: {}".format(
                url, resource.code, resource.reason
            )
        )

    content = resource.read().decode('UTF-8')
    versions = json.loads(content)[product_code]

    latest_version = versions[0]

    if latest_version['type'] != 'release':
        raise BuildException('Latest version of {} is not a release.'.format(product_code))

    return latest_version

def _read_product_code(package_directory):
    api_code_file = Path(HERE, package_directory, 'API_CODE')
    try:
        with api_code_file.open(encoding='UTF-8') as f:
            api_code = f.read().strip()
            return api_code
    except Exception:
        raise BuildException('Make sure the file {} exists.'.format(api_code_file))

def get_jetbrains_version(package_directory):
    product_code = _read_product_code(package_directory)
    latest_release_info = _get_latest_release_info(product_code)
    version = latest_release_info['version']
    if product_code == 'TBA':
        version += '.' + latest_release_info['build']
    return version

def get_git_version(package_directory):
    working_dir = Path(HERE, package_directory).as_posix()
    command = ['dpkg-parsechangelog', '-S', 'Version']
    return subprocess.check_output(command, cwd=working_dir).decode('UTF-8').strip()

def get_ppa_version(package_directory, credentials_file='launchpad.cfg', service_root='production', distribution='artful'):
    package_name = package_directory.split('/')[1]

    with open(os.path.abspath(credentials_file)) as f:
        text_credentials = f.read().strip()

        credentials = Credentials.from_string(text_credentials)
        launchpad = Launchpad(credentials, None, '/tmp/launchpad-cache-dir', service_root=service_root)

        lpw = LaunchpadWrapper(launchpad)
        binaries = lpw.get_published_binaries('jetbrains', distribution, 'amd64')
        for binary in binaries:
            if package_name == binary.binary_package_name:
                return binary.binary_package_version

class LaunchpadWrapper(object):
    def __init__(self, launchpad):
        self.launchpad = launchpad

    def get_ppa(self, ppa_name):
        try:
            return self.launchpad.me.getPPAByName(name=ppa_name)
        except NotFound:
            return None

    def get_series(self, ppa_name, series_name):
        return self.get_ppa(ppa_name).distribution.getSeries(name_or_version=series_name)

    def get_arch_series(self, ppa_name, series_name, archtag):
        series = self.get_series(ppa_name, series_name)
        return series.getDistroArchSeries(archtag=archtag)

    def get_published_binaries(self, ppa_name, series_name, archtag):
        ppa = self.get_ppa(ppa_name)
        series = self.get_arch_series(ppa_name, series_name, archtag)
        return ppa.getPublishedBinaries(distro_arch_series=series, status="Published")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('package_directory')
    args = parser.parse_args()

    jb = get_jetbrains_version(args.package_directory)
    git = get_git_version(args.package_directory)
    ppa = get_ppa_version(args.package_directory)

    if len(set([jb, git, ppa])) > 1:
        print(args.package_directory.split("/")[1])
        print("  Jetbrains: {}".format(jb))
        print("  Git:       {}".format(git))
        print("  Launchpad: {}".format(ppa))


if __name__ == '__main__':
    main()
